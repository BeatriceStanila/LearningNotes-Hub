### Document vs Relational Database
- regardless of your database (document, relational) you can write a LINQ query to pull back some data, make a change to that and call save changes to save the unit of work back to your database.

Can we treat EF Core as an abstraction over our database, in the sense that we can swap out for using different databases (SQL -> CosmosDB)?
- NO, because the goal is to leverage the power of the different systems and behave differently depending on the backend database.
- Retrieving data from multiple tables from SQL requires using INCLUDE to specifically tell EF to perform a JOIN in order to load all the data needed.
- With Document Databases this is not necessary.
- so this is why we can't swap between databases providers.

DB CONTEXT is the way EF Core connects everything up and tells us how use, how to map to the database and what the model is and everything like that.

  - EF Core with SQL -> creates a schema (the information it's spread accross multiple table)
  - EF Core with Cosmos -> creates a single document represented as a JSON document (document databases represent hierarchical structures of data)
    - related info are collocated (all info is in one document)

  
NullReferanceException: When you use a relation database and you intstruct the EF to get the 'customers', what EF will do is not get the entire 'customer' graph (including all the addresses and the phone numbers) because those are actually saved in different tableswith all the Foreing Key relationships. So, EF will only bring back the from the customer table itself and then if you take that 'customer' and attempt to drill into other tables ('address') it's not populated because it hasn't been loaded.

### Fix issue using INCLUDE (explicitly instructs the EF to load the entire graph or specifically the information neeeded).

!! Always is a good idea to examine the SQL query, even when using LINQ to express your queries.


Convergence: So basically, the competitve environment that exists now between document and relational databases
- it's pushing document databases to do better at things that relational databases are traditionally good at (the transactionality)
- likewise, the fact that the document databases are so good at dealing with docs it's pushing relational databases to have support for document capabilities.

## Mapping to JSON in relational database

'''protected override void OnModelCreating(ModelBuilder modelBuilder)
{
  modelBuilder.Entity<Customer>().OwnsOne(e=>e.Details, b=>b.
    {
      b.OwnsMany(e=>e.Addresses);
      b.OwnsMany(e=>e.PhoneNumbers);
      b.ToJson();
    }
}'''

This will create only a single table (instead of 4), but this single table has a DETAILS column and inside is that details thing for each customer in a JSON document. 
- we are establishing some sort of HYBRID model: it's a relational database but has a JSON document embedding inside a column in that relational database, and this allows us to mix and match.
